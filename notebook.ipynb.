{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPre533bjhNiuqNM/mHHl4Y",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RemasNawaf/HAR-Activity-Recognition/blob/main/notebook.ipynb.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pandas requests\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qvGlR1Ypq7my",
        "outputId": "51ed087e-ccb9-44df-90fe-786626e63719"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests) (2025.4.26)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import requests, zipfile, io\n",
        "\n",
        "# 1. تنزيل الأرشيف من موقع UCI\n",
        "url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/00240/UCI%20HAR%20Dataset.zip\"\n",
        "r = requests.get(url)\n",
        "z = zipfile.ZipFile(io.BytesIO(r.content))\n",
        "z.extractall(\"UCI_HAR_Dataset\")\n",
        "\n",
        "# 2. قراءة أسماء الخصائص (features)\n",
        "feat_path = \"UCI_HAR_Dataset/UCI HAR Dataset/features.txt\"\n",
        "features = pd.read_csv(feat_path, sep=\"\\s+\", header=None, names=[\"index\", \"feature\"])[\"feature\"].tolist()\n",
        "\n",
        "# 3. تحميل بيانات التدريب\n",
        "X_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/X_train.txt\",\n",
        "    sep=\"\\s+\", names=features\n",
        ")\n",
        "y_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/y_train.txt\",\n",
        "    sep=\"\\s+\", header=None, names=[\"Activity\"]\n",
        ")\n",
        "subject_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/subject_train.txt\",\n",
        "    sep=\"\\s+\", header=None, names=[\"Subject\"]\n",
        ")\n",
        "\n",
        "# 4. تحميل بيانات الاختبار\n",
        "X_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/X_test.txt\",\n",
        "    sep=\"\\s+\", names=features\n",
        ")\n",
        "y_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/y_test.txt\",\n",
        "    sep=\"\\s+\", header=None, names=[\"Activity\"]\n",
        ")\n",
        "subject_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/subject_test.txt\",\n",
        "    sep=\"\\s+\", header=None, names=[\"Subject\"]\n",
        ")\n",
        "\n",
        "# 5. دمج مجموعات التدريب والاختبار (اختياري)\n",
        "X = pd.concat([X_train, X_test], ignore_index=True)\n",
        "y = pd.concat([y_train, y_test], ignore_index=True)\n",
        "subjects = pd.concat([subject_train, subject_test], ignore_index=True)\n",
        "\n",
        "# 6. التحقق من الأشكال وعدد القيم الفارغة\n",
        "print(\"X shape:\", X.shape)           # يجب أن تكون (10299, 561)\n",
        "print(\"y shape:\", y.shape)           # (10299, 1)\n",
        "print(\"Subjects shape:\", subjects.shape)  # (10299, 1)\n",
        "print(\"Missing values in X:\", X.isnull().sum().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "G1GFWXqmrN7M",
        "outputId": "1b25f278-ebf3-4b0f-e3cf-53ef6f1c1594"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Duplicate names are not allowed.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-2-85462112776c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# 3. تحميل بيانات التدريب\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m X_train = pd.read_csv(\n\u001b[0m\u001b[1;32m     16\u001b[0m     \u001b[0;34m\"UCI_HAR_Dataset/UCI HAR Dataset/train/X_train.txt\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0msep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"\\s+\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnames\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    615\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    616\u001b[0m     \u001b[0;31m# Check for duplicates in names.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 617\u001b[0;31m     \u001b[0m_validate_names\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"names\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_validate_names\u001b[0;34m(names)\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnames\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    575\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnames\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnames\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 576\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Duplicate names are not allowed.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    577\u001b[0m         if not (\n\u001b[1;32m    578\u001b[0m             \u001b[0mis_list_like\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnames\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mallow_sets\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnames\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mabc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mKeysView\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Duplicate names are not allowed."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import requests, zipfile, io\n",
        "\n",
        "# 1. تنزيل الأرشيف وفكه (نفس الكود قبله)\n",
        "url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/00240/UCI%20HAR%20Dataset.zip\"\n",
        "r = requests.get(url)\n",
        "z = zipfile.ZipFile(io.BytesIO(r.content))\n",
        "z.extractall(\"UCI_HAR_Dataset\")\n",
        "\n",
        "# 2. قراءة أسماء الخصائص\n",
        "feat_path = \"UCI_HAR_Dataset/UCI HAR Dataset/features.txt\"\n",
        "features = pd.read_csv(feat_path, sep=\"\\s+\", header=None, names=[\"index\", \"feature\"])[\"feature\"].tolist()\n",
        "\n",
        "# 3. تحميل بيانات التدريب بدون names، ثم تعيين الأعمدة\n",
        "X_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/X_train.txt\",\n",
        "    sep=\"\\s+\",\n",
        "    header=None\n",
        ")\n",
        "X_train.columns = features\n",
        "\n",
        "y_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/y_train.txt\",\n",
        "    sep=\"\\s+\",\n",
        "    header=None,\n",
        "    names=[\"Activity\"]\n",
        ")\n",
        "subject_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/subject_train.txt\",\n",
        "    sep=\"\\s+\",\n",
        "    header=None,\n",
        "    names=[\"Subject\"]\n",
        ")\n",
        "\n",
        "# 4. نفس الشيء لبيانات الاختبار\n",
        "X_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/X_test.txt\",\n",
        "    sep=\"\\s+\",\n",
        "    header=None\n",
        ")\n",
        "X_test.columns = features\n",
        "\n",
        "y_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/y_test.txt\",\n",
        "    sep=\"\\s+\",\n",
        "    header=None,\n",
        "    names=[\"Activity\"]\n",
        ")\n",
        "subject_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/subject_test.txt\",\n",
        "    sep=\"\\s+\",\n",
        "    header=None,\n",
        "    names=[\"Subject\"]\n",
        ")\n",
        "\n",
        "# 5. دمج المجموعتين والتحقق\n",
        "X = pd.concat([X_train, X_test], ignore_index=True)\n",
        "y = pd.concat([y_train, y_test], ignore_index=True)\n",
        "subjects = pd.concat([subject_train, subject_test], ignore_index=True)\n",
        "\n",
        "print(\"X shape:\", X.shape)           # يجب أن تكون (10299, 561)\n",
        "print(\"y shape:\", y.shape)           # (10299, 1)\n",
        "print(\"Subjects shape:\", subjects.shape)  # (10299, 1)\n",
        "print(\"Missing values in X:\", X.isnull().sum().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7fAEa2ZzrSBb",
        "outputId": "379ae318-f359-4c20-86ac-57f7836fd485"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X shape: (10299, 561)\n",
            "y shape: (10299, 1)\n",
            "Subjects shape: (10299, 1)\n",
            "Missing values in X: 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# تثبيت الحزم (مرة واحدة فقط)\n",
        "!pip install pandas requests\n",
        "\n",
        "# استيراد المكتبات\n",
        "import requests, zipfile, io\n",
        "\n",
        "# 1. تحميل الأرشيف من UCI\n",
        "url = \"https://archive.ics.uci.edu/ml/machine-learning-databases/00240/UCI%20HAR%20Dataset.zip\"\n",
        "r = requests.get(url)\n",
        "\n",
        "# 2. فتح الأرشيف في الذاكرة وفكه داخل مجلد \"UCI_HAR_Dataset\"\n",
        "z = zipfile.ZipFile(io.BytesIO(r.content))\n",
        "z.extractall(\"UCI_HAR_Dataset\")\n",
        "\n",
        "print(\"✅ تم التحميل والفك بنجاح\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yTva8oBKst4U",
        "outputId": "8d88c14c-89ed-4380-b1fb-38900b0b8a5a"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.0.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.4.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests) (2025.4.26)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "✅ تم التحميل والفك بنجاح\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# 1. قراءة قائمة الخصائص (features)\n",
        "feat_df = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/features.txt\",\n",
        "    sep=\"\\s+\", header=None,\n",
        "    names=[\"idx\",\"feature\"]\n",
        ")\n",
        "features = feat_df[\"feature\"].tolist()\n",
        "\n",
        "# 2. تحميل X_train بدون أسماء أعمدة ثم تعيينها من قائمة features\n",
        "X_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/X_train.txt\",\n",
        "    sep=\"\\s+\", header=None\n",
        ")\n",
        "X_train.columns = features\n",
        "\n",
        "# 3. تحميل X_test بنفس الطريقة\n",
        "X_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/X_test.txt\",\n",
        "    sep=\"\\s+\", header=None\n",
        ")\n",
        "X_test.columns = features\n",
        "\n",
        "# 4. تحميل y_train و y_test و subject (اختياري للمرحلة القادمة)\n",
        "y_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/y_train.txt\",\n",
        "    sep=\"\\s+\", header=None,\n",
        "    names=[\"Activity\"]\n",
        ")\n",
        "y_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/y_test.txt\",\n",
        "    sep=\"\\s+\", header=None,\n",
        "    names=[\"Activity\"]\n",
        ")\n",
        "subject_train = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/train/subject_train.txt\",\n",
        "    sep=\"\\s+\", header=None,\n",
        "    names=[\"Subject\"]\n",
        ")\n",
        "subject_test = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/test/subject_test.txt\",\n",
        "    sep=\"\\s+\", header=None,\n",
        "    names=[\"Subject\"]\n",
        ")\n",
        "\n",
        "# 5. تأكيد الشكل\n",
        "print(\"X_train:\", X_train.shape)\n",
        "print(\"X_test: \", X_test.shape)\n",
        "print(\"y_train:\", y_train.shape)\n",
        "print(\"y_test: \", y_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iWg_29PwtMZC",
        "outputId": "6a9e507e-dd35-40f4-efaf-a746300ef4a0"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train: (7352, 561)\n",
            "X_test:  (2947, 561)\n",
            "y_train: (7352, 1)\n",
            "y_test:  (2947, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# 1. قراءة ملف ترميز الأنشطة\n",
        "labels_df = pd.read_csv(\n",
        "    \"UCI_HAR_Dataset/UCI HAR Dataset/activity_labels.txt\",\n",
        "    sep=\"\\s+\", header=None,\n",
        "    names=[\"code\",\"activity\"]\n",
        ")\n",
        "\n",
        "# 2. بناء قاموس تحويل الكود → الاسم\n",
        "label_map = dict(zip(labels_df.code, labels_df.activity))\n",
        "\n",
        "# 3. تطبيقه على y_train و y_test\n",
        "y_train[\"Activity\"] = y_train[\"Activity\"].map(label_map)\n",
        "y_test[\"Activity\"]  = y_test[\"Activity\"].map(label_map)\n",
        "\n",
        "# 4. عرض توزيع الأنشطة للتأكد\n",
        "print(\"توزيع نشاطات مجموعة التدريب:\")\n",
        "display(y_train.Activity.value_counts())\n",
        "print(\"\\nتوزيع نشاطات مجموعة الاختبار:\")\n",
        "display(y_test.Activity.value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "DXgwwMGptkZf",
        "outputId": "5531bea7-868f-4333-f6e2-d50821eac156"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "توزيع نشاطات مجموعة التدريب:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Activity\n",
              "LAYING                1407\n",
              "STANDING              1374\n",
              "SITTING               1286\n",
              "WALKING               1226\n",
              "WALKING_UPSTAIRS      1073\n",
              "WALKING_DOWNSTAIRS     986\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Activity</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>LAYING</th>\n",
              "      <td>1407</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STANDING</th>\n",
              "      <td>1374</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SITTING</th>\n",
              "      <td>1286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WALKING</th>\n",
              "      <td>1226</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WALKING_UPSTAIRS</th>\n",
              "      <td>1073</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WALKING_DOWNSTAIRS</th>\n",
              "      <td>986</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "توزيع نشاطات مجموعة الاختبار:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Activity\n",
              "LAYING                537\n",
              "STANDING              532\n",
              "WALKING               496\n",
              "SITTING               491\n",
              "WALKING_UPSTAIRS      471\n",
              "WALKING_DOWNSTAIRS    420\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Activity</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>LAYING</th>\n",
              "      <td>537</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>STANDING</th>\n",
              "      <td>532</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WALKING</th>\n",
              "      <td>496</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SITTING</th>\n",
              "      <td>491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WALKING_UPSTAIRS</th>\n",
              "      <td>471</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>WALKING_DOWNSTAIRS</th>\n",
              "      <td>420</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# 1. إنشاء StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "# 2. تطبيع X_train\n",
        "X_train_scaled = pd.DataFrame(\n",
        "    scaler.fit_transform(X_train),\n",
        "    columns=X_train.columns\n",
        ")\n",
        "\n",
        "# 3. تطبيع X_test\n",
        "X_test_scaled = pd.DataFrame(\n",
        "    scaler.transform(X_test),\n",
        "    columns=X_test.columns\n",
        ")\n",
        "\n",
        "# 4. معاينة أول 5 صفوف بعد التطبيع\n",
        "print(\"أول 5 صفوف من X_train بعد Standardization:\")\n",
        "display(X_train_scaled.head())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "id": "VY84rfwetxgT",
        "outputId": "0f3c306b-0717-4a85-8660-d4ddeec8a440"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "أول 5 صفوف من X_train بعد Standardization:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "   tBodyAcc-mean()-X  tBodyAcc-mean()-Y  tBodyAcc-mean()-Z  tBodyAcc-std()-X  \\\n",
              "0           0.200642          -0.063683          -0.419628         -0.868814   \n",
              "1           0.055948           0.031486          -0.253908         -0.875426   \n",
              "2           0.073515          -0.043416          -0.076295         -0.869039   \n",
              "3           0.066696          -0.208422          -0.249712         -0.870626   \n",
              "4           0.030469           0.027587          -0.109848         -0.875188   \n",
              "\n",
              "   tBodyAcc-std()-Y  tBodyAcc-std()-Z  tBodyAcc-mad()-X  tBodyAcc-mad()-Y  \\\n",
              "0         -0.939441         -0.737529         -0.859817         -0.939019   \n",
              "1         -0.923902         -0.849304         -0.868531         -0.921998   \n",
              "2         -0.907760         -0.893785         -0.863137         -0.898854   \n",
              "3         -0.940022         -0.921805         -0.864503         -0.938124   \n",
              "4         -0.934878         -0.921343         -0.867384         -0.931789   \n",
              "\n",
              "   tBodyAcc-mad()-Z  tBodyAcc-max()-X  ...  fBodyBodyGyroJerkMag-meanFreq()  \\\n",
              "0         -0.766437         -0.856036  ...                        -0.795359   \n",
              "1         -0.848928         -0.871359  ...                         0.130614   \n",
              "2         -0.896701         -0.863323  ...                         1.152336   \n",
              "3         -0.925279         -0.863323  ...                         1.112769   \n",
              "4         -0.928028         -0.870260  ...                        -0.149577   \n",
              "\n",
              "   fBodyBodyGyroJerkMag-skewness()  fBodyBodyGyroJerkMag-kurtosis()  \\\n",
              "0                         0.025960                        -0.276399   \n",
              "1                        -0.897357                        -0.767990   \n",
              "2                        -0.260878                        -0.438316   \n",
              "3                         0.591045                         0.463155   \n",
              "4                        -0.138515                        -0.240313   \n",
              "\n",
              "   angle(tBodyAccMean,gravity)  angle(tBodyAccJerkMean),gravityMean)  \\\n",
              "0                    -0.360603                              0.062940   \n",
              "1                     0.133011                             -0.021461   \n",
              "2                    -0.377840                              0.391976   \n",
              "3                    -0.135025                             -0.033637   \n",
              "4                     0.340406                              0.268486   \n",
              "\n",
              "   angle(tBodyGyroMean,gravityMean)  angle(tBodyGyroJerkMean,gravityMean)  \\\n",
              "0                         -0.778427                             -0.026080   \n",
              "1                         -1.218805                              1.484470   \n",
              "2                          0.151207                              1.704201   \n",
              "3                          1.037851                             -1.003019   \n",
              "4                          1.125918                             -1.276282   \n",
              "\n",
              "   angle(X,gravityMean)  angle(Y,gravityMean)  angle(Z,gravityMean)  \n",
              "0             -0.687219              0.407946             -0.007568  \n",
              "1             -0.694138              0.409117              0.007875  \n",
              "2             -0.702239              0.410288              0.026502  \n",
              "3             -0.701684              0.414650              0.031714  \n",
              "4             -0.700152              0.425463              0.045225  \n",
              "\n",
              "[5 rows x 561 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fbf6a2e3-7054-4837-b9dd-5c6640b52779\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>tBodyAcc-mean()-X</th>\n",
              "      <th>tBodyAcc-mean()-Y</th>\n",
              "      <th>tBodyAcc-mean()-Z</th>\n",
              "      <th>tBodyAcc-std()-X</th>\n",
              "      <th>tBodyAcc-std()-Y</th>\n",
              "      <th>tBodyAcc-std()-Z</th>\n",
              "      <th>tBodyAcc-mad()-X</th>\n",
              "      <th>tBodyAcc-mad()-Y</th>\n",
              "      <th>tBodyAcc-mad()-Z</th>\n",
              "      <th>tBodyAcc-max()-X</th>\n",
              "      <th>...</th>\n",
              "      <th>fBodyBodyGyroJerkMag-meanFreq()</th>\n",
              "      <th>fBodyBodyGyroJerkMag-skewness()</th>\n",
              "      <th>fBodyBodyGyroJerkMag-kurtosis()</th>\n",
              "      <th>angle(tBodyAccMean,gravity)</th>\n",
              "      <th>angle(tBodyAccJerkMean),gravityMean)</th>\n",
              "      <th>angle(tBodyGyroMean,gravityMean)</th>\n",
              "      <th>angle(tBodyGyroJerkMean,gravityMean)</th>\n",
              "      <th>angle(X,gravityMean)</th>\n",
              "      <th>angle(Y,gravityMean)</th>\n",
              "      <th>angle(Z,gravityMean)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.200642</td>\n",
              "      <td>-0.063683</td>\n",
              "      <td>-0.419628</td>\n",
              "      <td>-0.868814</td>\n",
              "      <td>-0.939441</td>\n",
              "      <td>-0.737529</td>\n",
              "      <td>-0.859817</td>\n",
              "      <td>-0.939019</td>\n",
              "      <td>-0.766437</td>\n",
              "      <td>-0.856036</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.795359</td>\n",
              "      <td>0.025960</td>\n",
              "      <td>-0.276399</td>\n",
              "      <td>-0.360603</td>\n",
              "      <td>0.062940</td>\n",
              "      <td>-0.778427</td>\n",
              "      <td>-0.026080</td>\n",
              "      <td>-0.687219</td>\n",
              "      <td>0.407946</td>\n",
              "      <td>-0.007568</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.055948</td>\n",
              "      <td>0.031486</td>\n",
              "      <td>-0.253908</td>\n",
              "      <td>-0.875426</td>\n",
              "      <td>-0.923902</td>\n",
              "      <td>-0.849304</td>\n",
              "      <td>-0.868531</td>\n",
              "      <td>-0.921998</td>\n",
              "      <td>-0.848928</td>\n",
              "      <td>-0.871359</td>\n",
              "      <td>...</td>\n",
              "      <td>0.130614</td>\n",
              "      <td>-0.897357</td>\n",
              "      <td>-0.767990</td>\n",
              "      <td>0.133011</td>\n",
              "      <td>-0.021461</td>\n",
              "      <td>-1.218805</td>\n",
              "      <td>1.484470</td>\n",
              "      <td>-0.694138</td>\n",
              "      <td>0.409117</td>\n",
              "      <td>0.007875</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.073515</td>\n",
              "      <td>-0.043416</td>\n",
              "      <td>-0.076295</td>\n",
              "      <td>-0.869039</td>\n",
              "      <td>-0.907760</td>\n",
              "      <td>-0.893785</td>\n",
              "      <td>-0.863137</td>\n",
              "      <td>-0.898854</td>\n",
              "      <td>-0.896701</td>\n",
              "      <td>-0.863323</td>\n",
              "      <td>...</td>\n",
              "      <td>1.152336</td>\n",
              "      <td>-0.260878</td>\n",
              "      <td>-0.438316</td>\n",
              "      <td>-0.377840</td>\n",
              "      <td>0.391976</td>\n",
              "      <td>0.151207</td>\n",
              "      <td>1.704201</td>\n",
              "      <td>-0.702239</td>\n",
              "      <td>0.410288</td>\n",
              "      <td>0.026502</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.066696</td>\n",
              "      <td>-0.208422</td>\n",
              "      <td>-0.249712</td>\n",
              "      <td>-0.870626</td>\n",
              "      <td>-0.940022</td>\n",
              "      <td>-0.921805</td>\n",
              "      <td>-0.864503</td>\n",
              "      <td>-0.938124</td>\n",
              "      <td>-0.925279</td>\n",
              "      <td>-0.863323</td>\n",
              "      <td>...</td>\n",
              "      <td>1.112769</td>\n",
              "      <td>0.591045</td>\n",
              "      <td>0.463155</td>\n",
              "      <td>-0.135025</td>\n",
              "      <td>-0.033637</td>\n",
              "      <td>1.037851</td>\n",
              "      <td>-1.003019</td>\n",
              "      <td>-0.701684</td>\n",
              "      <td>0.414650</td>\n",
              "      <td>0.031714</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.030469</td>\n",
              "      <td>0.027587</td>\n",
              "      <td>-0.109848</td>\n",
              "      <td>-0.875188</td>\n",
              "      <td>-0.934878</td>\n",
              "      <td>-0.921343</td>\n",
              "      <td>-0.867384</td>\n",
              "      <td>-0.931789</td>\n",
              "      <td>-0.928028</td>\n",
              "      <td>-0.870260</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.149577</td>\n",
              "      <td>-0.138515</td>\n",
              "      <td>-0.240313</td>\n",
              "      <td>0.340406</td>\n",
              "      <td>0.268486</td>\n",
              "      <td>1.125918</td>\n",
              "      <td>-1.276282</td>\n",
              "      <td>-0.700152</td>\n",
              "      <td>0.425463</td>\n",
              "      <td>0.045225</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 561 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fbf6a2e3-7054-4837-b9dd-5c6640b52779')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fbf6a2e3-7054-4837-b9dd-5c6640b52779 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fbf6a2e3-7054-4837-b9dd-5c6640b52779');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f87bda35-9920-4848-8464-aa5b510707b2\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f87bda35-9920-4848-8464-aa5b510707b2')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f87bda35-9920-4848-8464-aa5b510707b2 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# 1. إنشاء هيكل المجلدات\n",
        "os.makedirs(\"data/original_data\", exist_ok=True)\n",
        "os.makedirs(\"data/preprocessed_data\", exist_ok=True)\n",
        "os.makedirs(\"data/Results\", exist_ok=True)\n",
        "\n",
        "# 2. حفظ البيانات الأصلية (Original Data)\n",
        "X_train.to_csv(\"data/original_data/X_train_original.csv\", index=False)\n",
        "X_test.to_csv(\"data/original_data/X_test_original.csv\", index=False)\n",
        "y_train.to_frame().to_csv(\"data/original_data/Y_train_original.csv\", index=False)\n",
        "y_test.to_frame().to_csv(\"data/original_data/Y_test_original.csv\", index=False)\n",
        "\n",
        "# 3. حفظ البيانات المعالجة (Preprocessed Data)\n",
        "X_train_scaled.to_csv(\"data/preprocessed_data/X_train.csv\", index=False)\n",
        "X_test_scaled.to_csv(\"data/preprocessed_data/X_test.csv\", index=False)\n",
        "y_train.to_frame().to_csv(\"data/preprocessed_data/Y_train.csv\", index=False)\n",
        "y_test.to_frame().to_csv(\"data/preprocessed_data/Y_test.csv\", index=False)\n",
        "\n",
        "print(\"✅ تم إنشاء المجلدات وحفظ ملفات original & preprocessed بنجاح\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "NEgzvKzft-0D",
        "outputId": "8345e255-fa5e-4137-d0c8-ea11df844837"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'DataFrame' object has no attribute 'to_frame'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-c253f65710be>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"data/original_data/X_train_original.csv\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"data/original_data/X_test_original.csv\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0my_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"data/original_data/Y_train_original.csv\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_frame\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"data/original_data/Y_test_original.csv\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   6297\u001b[0m         ):\n\u001b[1;32m   6298\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6299\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6300\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6301\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfinal\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'to_frame'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "\n",
        "# إنشاء المجلدات\n",
        "os.makedirs(\"data/original_data\", exist_ok=True)\n",
        "os.makedirs(\"data/preprocessed_data\", exist_ok=True)\n",
        "os.makedirs(\"data/Results\", exist_ok=True)\n",
        "\n",
        "# حفظ البيانات الأصلية\n",
        "X_train.to_csv(\"data/original_data/X_train_original.csv\", index=False)\n",
        "X_test .to_csv(\"data/original_data/X_test_original.csv\",  index=False)\n",
        "y_train.to_csv(\"data/original_data/Y_train_original.csv\", index=False)  # بدّل هنا\n",
        "y_test .to_csv(\"data/original_data/Y_test_original.csv\",  index=False)  # و هنا\n",
        "\n",
        "# حفظ البيانات المعالجة\n",
        "X_train_scaled.to_csv(\"data/preprocessed_data/X_train.csv\", index=False)\n",
        "X_test_scaled .to_csv(\"data/preprocessed_data/X_test.csv\",  index=False)\n",
        "y_train.to_csv(\"data/preprocessed_data/Y_train.csv\", index=False)      # و هنا\n",
        "y_test .to_csv(\"data/preprocessed_data/Y_test.csv\",  index=False)      # و هنا\n",
        "\n",
        "print(\"✅ تم الحفظ بنجاح\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gwlt-afFuUgB",
        "outputId": "cecd7e52-628e-431c-8682-1b1ff1319d2f"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ تم الحفظ بنجاح\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. استيراد المكتبات\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import os\n",
        "\n",
        "# 2. إنشاء مجلد Results (إذا لم يكن موجودًا)\n",
        "os.makedirs(\"data/Results\", exist_ok=True)\n",
        "\n",
        "# 3. تعريف النماذج\n",
        "models = {\n",
        "    'LogisticRegression': LogisticRegression(max_iter=1000),\n",
        "    'KNN': KNeighborsClassifier(),\n",
        "    'SVM': SVC(),\n",
        "    'DecisionTree': DecisionTreeClassifier(),\n",
        "    'RandomForest': RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "}\n",
        "\n",
        "# 4. تدريب كل نموذج، توقع على X_test_scaled، وحساب الدقة\n",
        "results = []\n",
        "for name, model in models.items():\n",
        "    model.fit(X_train_scaled, y_train.values.ravel())           # تدريب\n",
        "    preds = model.predict(X_test_scaled)                        # توقع\n",
        "    acc = accuracy_score(y_test, preds)                         # دقة\n",
        "    results.append((name, acc))\n",
        "\n",
        "    # 5. حفظ التوقعات لكل نموذج كـ CSV\n",
        "    pd.DataFrame(preds, columns=['Prediction']).to_csv(\n",
        "        f\"data/Results/predictions_{name}.csv\", index=False\n",
        "    )\n",
        "\n",
        "# 6. إنشاء جدول ملخص الدقة وعرضه\n",
        "results_df = pd.DataFrame(results, columns=['Model', 'Accuracy']).sort_values('Accuracy', ascending=False)\n",
        "print(\"🔍 Summary of test accuracy for each model:\")\n",
        "display(results_df)\n",
        "\n",
        "# 7. رسم بياني لأداء النماذج\n",
        "plt.figure(figsize=(8,4))\n",
        "plt.bar(results_df['Model'], results_df['Accuracy'])\n",
        "plt.xticks(rotation=45)\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Model Comparison on HAR Dataset')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 683
        },
        "id": "QLU9wp71uvSr",
        "outputId": "7f561630-6b02-4f4e-9377-93d036d0a093"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 Summary of test accuracy for each model:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "                Model  Accuracy\n",
              "0  LogisticRegression  0.955209\n",
              "2                 SVM  0.951815\n",
              "4        RandomForest  0.926026\n",
              "1                 KNN  0.883610\n",
              "3        DecisionTree  0.856125"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-31cb048c-5c23-4068-8b80-7ea4999c3a89\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Model</th>\n",
              "      <th>Accuracy</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LogisticRegression</td>\n",
              "      <td>0.955209</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>SVM</td>\n",
              "      <td>0.951815</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>RandomForest</td>\n",
              "      <td>0.926026</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>KNN</td>\n",
              "      <td>0.883610</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>DecisionTree</td>\n",
              "      <td>0.856125</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31cb048c-5c23-4068-8b80-7ea4999c3a89')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-31cb048c-5c23-4068-8b80-7ea4999c3a89 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-31cb048c-5c23-4068-8b80-7ea4999c3a89');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-77b2b6f1-c21c-43b1-b221-b56cd6bab222\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-77b2b6f1-c21c-43b1-b221-b56cd6bab222')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-77b2b6f1-c21c-43b1-b221-b56cd6bab222 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_63ed48b5-b5cf-469a-b52b-f34bfcee3703\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('results_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_63ed48b5-b5cf-469a-b52b-f34bfcee3703 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('results_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "results_df",
              "summary": "{\n  \"name\": \"results_df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Model\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"SVM\",\n          \"DecisionTree\",\n          \"RandomForest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Accuracy\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.04342896348463152,\n        \"min\": 0.8561248727519511,\n        \"max\": 0.9552086868001357,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.9518154054971157,\n          0.8561248727519511,\n          0.9260264675941635\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "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VqvFjBkzhK2trTAyMhJVqlQR+/btEz179hS2trZafU+fPi2cnJyEoaGh1n735MkT0bZtW2FhYSHMzc1Fx44dxdOnT7X6JCcni1GjRglHR0eRJ08ekTt3buHo6CiWLVuWrqbLly+Ldu3aifz58wsjIyNha2srOnXqJIKCgrT6TZ06VRQpUkQolUou00WypRAiC48KICKSEc1JC54/f44CBQrouhwiIvoMnDNLRERERLLFMEtEREREssUwS0RERESyxTmzRERERCRbOh2ZPXnyJNzd3WFtbQ2FQoHdu3f/5zbHjx9H1apVYWRkhFKlSmH9+vVfvU4iIiIiyp50us5sYmIiHB0d8dNPP6Fdu3b/2f/hw4do2bIl+vXrB39/fwQFBaF3794oXLgwXF1dP+k+1Wo1nj59ijx58vDsJ0RERETZkBACCQkJsLa2hlL58bHXbDPNQKFQYNeuXfDw8Phgn9GjR2P//v1aZyXq0qULXr16hYMHD2a4TXJystYZbSIiIlCuXLksq5uIiIiIvo7w8HAULVr0o31kdQawkJCQdOeadnV1xbBhwz64ja+vLyZPnpyuPTw8HGZmZlldIhERERF9ofj4eNjY2CBPnjz/2VdWYTYyMhJWVlZabVZWVoiPj8ebN29gYmKSbpsxY8bA29tb+lnz5JiZmTHMEhEREWVjnzIlVFZh9nMYGRnByMhI12UQERER0Vcgq3VmCxUqhKioKK22qKgomJmZZTgqS0REREQ5m6zCbK1atRAUFKTVdvjwYdSqVUtHFRERERGRLuk0zL5+/RpXrlzBlStXALxbeuvKlSsICwsD8G6+a48ePaT+/fr1w4MHD/DLL7/g9u3bWLZsGbZt24bhw4fronwiIiIi0jGdhtkLFy6gSpUqqFKlCgDA29sbVapUwcSJEwEAz549k4ItABQvXhz79+/H4cOH4ejoiLlz52L16tWfvMYsEREREeUs2Wad2W8lPj4e5ubmiIuL42oGRERERNlQZvKarObMEhERERG9j2GWiIiIiGSLYZaIiIiIZIthloiIiIhki2GWiIiIiGSLYZaIiIiIZEtf1wV8D+x+3a/rEr5Lj2a21HUJRERE9JUxzBJ9Jn5I0Q1+SCEiovdxmgERERERyRbDLBERERHJFsMsEREREckWwywRERERyRbDLBERERHJFsMsEREREckWwywRERERyRbXmSUi+n9cO1g3uHYwEX0JjswSERERkWwxzBIRERGRbDHMEhEREZFsMcwSERERkWwxzBIRERGRbDHMEhEREZFsMcwSERERkWwxzBIRERGRbDHMEhEREZFsMcwSERERkWwxzBIRERGRbDHMEhEREZFs6eu6ACIioq/J7tf9ui7hu/RoZktdl0DfCY7MEhEREZFsMcwSERERkWwxzBIRERGRbDHMEhEREZFsMcwSERERkWwxzBIRERGRbDHMEhEREZFsMcwSERERkWzxpAlEREQkKzwRhm5k1xNhcGSWiIiIiGSLYZaIiIiIZIthloiIiIhki2GWiIiIiGSLYZaIiIiIZIthloiIiIhki2GWiIiIiGSLYZaIiIiIZIthloiIiIhki2GWiIiIiGSLYZaIiIiIZIthloiIiIhkS+dhdunSpbCzs4OxsTGcnZ1x7ty5j/ZfsGABypQpAxMTE9jY2GD48OF4+/btN6qWiIiIiLITnYbZrVu3wtvbGz4+Prh06RIcHR3h6uqK6OjoDPtv2rQJv/76K3x8fHDr1i2sWbMGW7duxdixY79x5URERESUHeg0zM6bNw99+vSBp6cnypUrhxUrViBXrlxYu3Zthv1Pnz6NOnXqoFu3brCzs0OzZs3QtWvX/xzNJSIiIqKcSWdhNiUlBRcvXoSLi8v/ilEq4eLigpCQkAy3qV27Ni5evCiF1wcPHuDAgQNwc3P74P0kJycjPj5e60JEREREOYO+ru44JiYGKpUKVlZWWu1WVla4fft2htt069YNMTExqFu3LoQQSEtLQ79+/T46zcDX1xeTJ0/O0tqJiIiIKHvQ+QFgmXH8+HHMmDEDy5Ytw6VLl7Bz507s378fU6dO/eA2Y8aMQVxcnHQJDw//hhUTERER0deks5HZAgUKQE9PD1FRUVrtUVFRKFSoUIbbTJgwAT/++CN69+4NAKhYsSISExPRt29fjBs3Dkpl+mxuZGQEIyOjrH8ARERERKRzOhuZNTQ0hJOTE4KCgqQ2tVqNoKAg1KpVK8NtkpKS0gVWPT09AIAQ4usVS0RERETZks5GZgHA29sbPXv2RLVq1VCjRg0sWLAAiYmJ8PT0BAD06NEDRYoUga+vLwDA3d0d8+bNQ5UqVeDs7IzQ0FBMmDAB7u7uUqglIiIiou+HTsNs586d8fz5c0ycOBGRkZGoXLkyDh48KB0UFhYWpjUSO378eCgUCowfPx4REREoWLAg3N3dMX36dF09BCIiIiLSIZ2GWQAYNGgQBg0alOF1x48f1/pZX18fPj4+8PHx+QaVEREREVF2J6vVDIiIiIiI3scwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLLFMEtEREREssUwS0RERESyxTBLRERERLKl8zC7dOlS2NnZwdjYGM7Ozjh37txH+7969QoDBw5E4cKFYWRkhNKlS+PAgQPfqFoiIiIiyk70dXnnW7duhbe3N1asWAFnZ2csWLAArq6uuHPnDiwtLdP1T0lJQdOmTWFpaYmAgAAUKVIEjx8/hoWFxbcvnoiIiIh0Tqdhdt68eejTpw88PT0BACtWrMD+/fuxdu1a/Prrr+n6r127FrGxsTh9+jQMDAwAAHZ2dh+9j+TkZCQnJ0s/x8fHZ90DICIiIiKd0tk0g5SUFFy8eBEuLi7/K0aphIuLC0JCQjLcZu/evahVqxYGDhwIKysrVKhQATNmzIBKpfrg/fj6+sLc3Fy62NjYZPljISIiIiLd0FmYjYmJgUqlgpWVlVa7lZUVIiMjM9zmwYMHCAgIgEqlwoEDBzBhwgTMnTsX06ZN++D9jBkzBnFxcdIlPDw8Sx8HEREREelOpqcZ2NnZ4aeffkKvXr1QrFixr1HTB6nValhaWmLlypXQ09ODk5MTIiIiMHv2bPj4+GS4jZGREYyMjL5pnURERET0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exdVqlTByJEjsWrVKowYMQItW7ZEhw4dcPz4cSiVSpQuXRobNmyAubk5GjZsiOjoaCnIAt/3+6JCCCF0XQR9H/79qXHnzp2YPXs29u/fj8jISGzfvh3r16+HgYEBihYtip07d8LExAR//PEHevXqxRGKDzh69ChcXV1RpEgRxMbGYvbs2WjSpAlKlSqF1NRUtGrVCoULF8b69et1XSplUytWrMCAAQPg6+uLUaNGSatcKBQKadSIvkxoaCgGDRqE3Llz4/HjxxBCoEKFClAqlVAqlUhOToZCoYCJiQmePXuG5cuXo2jRoroum76R169fY/369Rg0aJDUdufOHUyfPh379+/Hjh070LBhQ6jVaty7dw/u7u6wsLDAmTNnuH+CYZa+kfffEGNjY5EvXz789ddf6N27N6pVq4Zz587B1dUVNWvWRP78+fHrr7/i999/R506daTbSEtLY6D9gPDwcERHR8PW1hYFChSQ2tVqNbp06YIyZcpgypQpAL7vT+/fO01AjYuLw5s3b1CoUCGpbebMmRg3bhwWLVqEgQMHptuGvtydO3cwfPhwnDp1CkZGRujYsSMePHgAhUIBU1NTpKamIiUlBXPnzkW5cuV0XS59I/9+b3v/57t372L69OnYt2+fNOVArVbj/v37MDAwgJ2dnY6qzl6YDOirez/ITp8+HY8ePYK3tzdatGiBWbNm4datW+jWrRsaNWoES0tLPHv2DHny5El3OwyyH2ZjYwMbGxuttpSUFEydOhV///03pk+fzkDyndOE0j179sDPzw/h4eEoVaoUmjRpAm9vb/z6668QQmDIkCFQKpXo378/AH74yUplypTBokWLMGzYMKSkpGDAgAGoWLGirssiHdIc//H+1BN9fX0p0JYuXRrjxo0DAHTt2hW///47mjVrBnt7e12Wne1wZJa+mdGjR+P333+Hn58fXFxctE5TC7z7NJqYmIhu3bohPj4ex48f15oPRJ9u48aNOH/+PLZu3Yq//vqL8xy/c5qDRAIDA9G6dWuMGzcODg4OOHToEK5fvw4HBwesWLECJiYmmDNnDn755ResXLkSvXv31nXpOdLdu3cxZMgQAMC4ceNQr1496TqOhH8/NK/1wYMHsWLFCuTLlw/Vq1eXPkimpqbCwMAAwLtTH48ePRpXr17F9evXYWJiwt+T9zDM0jexd+9e/Pzzzzhw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+fIlrly5Iv2sUqlgZmYGLy8vREdHIyYmRrruzZs3iI6ORlpaGo4fP84gS0RERPT/GGa/shcvXmTY3r59eygUCixYsABpaWnSqgWWlpZQKpVITU2V+pqYmKBu3bpYtWoVKlas+E3qJiIiIpIDhtmv6NSpU+jQoQNOnjwptWlmdVSrVg21a9fGnj17MH36dMTFxeHhw4dYtGgR7OzsULRoUa3b0tPTg7Gx8Tetn4iIiCi7Y5j9iiwtLSGEwKxZs/D3338DeLcurEqlgoWFBaZNm4ZKlSph+/btKFiwIFq3bo2oqCjs2bMHCoUi3Vq0RERERKSNB4B9Zffu3cOQIUMghMCECRNQp04dAEBqaioMDAyQkpKClJQULF++HC4uLqhUqRL09PSQlpamdQAYEREREaXHkdmvzN7eHosWLYJCocDUqVMRHBwMADAwMIAQAjExMejUqRMePnyIKlWqQE9PDyqVikGWiIiI6BNwZPYbyWiENioqCp06dUJERARu3boFAwMDXZdJREREJCsMs9+QJtAqFAr0798fixcvxpMnT3D16lUYGBhwagERERFRJnGawTf0/pSDNm3aMMgSERERfSGOzOrA7du3sWzZMsybNw/6+voMskRERESfiWFWxxhkiYiIiD4fwywRERERyRbnzBIRERGRbDHMEhEREZFsMcwSERERkWwxzBIRERGRbDHMEhEREZFsMcwSERERkWwxzBIRERGRbDHMEhEREZFsMcwSERERkWz9H9U2PweoQ5q+AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip freeze | grep -E \"pandas|scikit-learn|requests|matplotlib\" > requirements.txt\n"
      ],
      "metadata": {
        "id": "chSZDkxtwmt8"
      },
      "execution_count": 12,
      "outputs": []
    }
  ]
}